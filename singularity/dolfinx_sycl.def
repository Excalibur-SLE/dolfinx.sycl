BootStrap: docker
From: dolfinx/dev-env:latest

%environment
    export PETSC_ARCH=linux-gnu-real-32
    export GINKGO_DIR=/usr/local/ginkgo
    export CUDA_PATH=/usr/local/cuda-10.2
    export DPCPP_HOME=/usr/local/sycl_workspace
    export EIGEN3_INCLUDE_DIR=/usr/local/include/eigen3/Eigen
    export PATH=${DPCPP_HOME}/llvm/build/bin:${CUDA_PATH}/bin${PATH:+:${PATH}}
    export LD_LIBRARY_PATH=${DPCPP_HOME}/llvm/build/lib:${GINKGO_DIR}/lib:${CUDA_PATH}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

%post
    export DEBIAN_FRONTEND=noninteractive
    
    apt-get -y update
    apt-get -y install software-properties-common
    apt-get -y install libboost-fiber-dev

    mkdir -p /tmp/ && cd /tmp
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
    echo "deb https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
    add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
    apt -y update
    apt install -y intel-oneapi-common-licensing intel-oneapi-common-vars intel-oneapi-compiler-dpcpp-cpp intel-oneapi-dev-utilities \
    intel-oneapi-dpcpp-debugger intel-oneapi-libdpstd-devel intel-oneapi-tbb-devel

    apt-get update -y 
    apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 intel-opencl-icd

    echo " === Installing CUDA..."
    apt update
    add-apt-repository ppa:graphics-drivers
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
    bash -c 'echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list'
    apt update
    apt install -yq cuda-10-2

    echo " === Installing clang..."
    apt update
    apt-get install -y clang-format clang-tidy clang-tools clang clangd libc++-dev
    apt-get install -y libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev
    apt-get install -y libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang

    echo "=== Installing Eigen3 Development Version"
    mkdir -p /tmp/ && cd /tmp
    apt-get -y purge libeigen3-dev
    git clone https://gitlab.com/libeigen/eigen.git
    cd eigen && mkdir build && cd build
    cmake .. && make install

    echo " === Installing hipSYCL..."
    cd /tmp
    git clone --recurse-submodules https://github.com/illuhad/hipSYCL
    cd hipSYCL && mkdir build
    cd build && cmake ..
    make -j4 && make install

    echo " === Installing INTEL SYCL..."
    export DPCPP_HOME=/usr/local/sycl_workspace
    mkdir -p $DPCPP_HOME
    cd $DPCPP_HOME
    git clone -b sycl --single-branch https://github.com/intel/llvm
    python3 $DPCPP_HOME/llvm/buildbot/configure.py --cuda
    python3 $DPCPP_HOME/llvm/buildbot/compile.py
    
    apt-get install -y gcc-8 g++-8
    export CUDACXX=/usr/local/cuda-10.2/bin/nvcc
    export CUDAHOSTCXX=/usr/bin/g++-8

    echo " === Installing ginkgo..."
    cd /tmp/
    git clone https://github.com/ginkgo-project/ginkgo.git
    cd ginkgo && mkdir build && cd build
    cmake -DGINKGO_BUILD_CUDA=ON -DGINKGO_BUILD_OMP=ON \
    -DGINKGO_BUILD_TESTS=OFF -DGINKGO_BUILD_BENCHMARKS=OFF \
    -DGINKGO_BUILD_REFERENCE=ON -DCMAKE_INSTALL_PREFIX=/usr/local/ginkgo ..
    make -j3 && make install

    echo " === Installing dolfinx..."
    pip3 install git+https://github.com/FEniCS/fiat.git --upgrade
    pip3 install git+https://github.com/FEniCS/ufl.git --upgrade
    pip3 install git+https://github.com/FEniCS/ffcx.git@igor/sycl --upgrade

    cd /tmp/
    export PETSC_ARCH=linux-gnu-real-32
    export EIGEN3_INCLUDE_DIR=/usr/local/include/eigen3/Eigen
    git clone https://github.com/FEniCS/dolfinx.git
    cd dolfinx && mkdir -p build && cd build
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ../cpp/
    ninja -j3 install


%labels
    Author IgorBaratta

%help
    This is a environment container used to install all software needed to 
    run dolfinx_sycl.