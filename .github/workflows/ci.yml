name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container: dolfinx/dolfinx:latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Intel compilers
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
        apt update
        apt install -y intel-oneapi-common-vars intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        . /opt/intel/oneapi/setvars.sh
        export CXX=icpx
        export CC=icx
        mkdir build && cd build
        cmake -DSYCL_IMPL=LLVM ..

#     - name: Build
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       # Execute the build.  You can specify a specific target with "--target <NAME>"
#       run: cmake --build . --config $BUILD_TYPE

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C $BUILD_TYPE
